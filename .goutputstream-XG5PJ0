
#include "mbed.h"
#include <string.h>
// for uLCD
#include "uLCD_4DGL.h"
// for DNN and ACC
#include "accelerometer_handler.h"
#include "config.h"
#include "magic_wand_model_data.h"
#include "tensorflow/lite/c/common.h"
#include "tensorflow/lite/micro/kernels/micro_ops.h"
#include "tensorflow/lite/micro/micro_error_reporter.h"
#include "tensorflow/lite/micro/micro_interpreter.h"
#include "tensorflow/lite/micro/micro_mutable_op_resolver.h"
#include "tensorflow/lite/schema/schema_generated.h"
#include "tensorflow/lite/version.h"
// for Audio
#include <cmath>
#include "DA7212.h"
#define bufferLength (32)
#define signalLength (42)
// PC communicate
Serial pc(USBTX, USBRX);
// audio using
DA7212 audio;
int16_t waveform[kAudioTxBufferSize];
char serialInBuffer[bufferLength];
// thread variable
EventQueue queue(32 * EVENTS_EVENT_SIZE);
EventQueue queue2(32 * EVENTS_EVENT_SIZE);
Thread menuing;
Thread playing;
int playinging_id;
// func variable
InterruptIn MENU(SW2);
InterruptIn BW(SW3);
DigitalOut red_led(LED1);
DigitalOut green_led(LED2); // light up when load data
// saved song data
char song_name[20] = "Little Star";
int step = 0;
int song[42]; /*= {
  261, 261, 392, 392, 440, 440, 392,
  349, 349, 330, 330, 294, 294, 261,
  392, 392, 349, 349, 330, 330, 294,
  392, 392, 349, 349, 330, 330, 294,
  261, 261, 392, 392, 440, 440, 392,
  349, 349, 330, 330, 294, 294, 261};*/

int noteLength[42];/* = {
  1, 1, 1, 1, 1, 1, 2,
  1, 1, 1, 1, 1, 1, 2,
  1, 1, 1, 1, 1, 1, 2,
  1, 1, 1, 1, 1, 1, 2,
  1, 1, 1, 1, 1, 1, 2,
  1, 1, 1, 1, 1, 1, 2};*/
// uLCD port
uLCD_4DGL uLCD(D1, D0, D2); // serial tx, serial rx, reset pin;
// play single tone
void playNote(int freq)
{
  for (int i = 0; i < kAudioTxBufferSize; i++)
  {
    waveform[i] = (int16_t) (sin((double)i * 2. * M_PI/(double) (kAudioSampleFrequency / freq)) * ((1<<16) - 1));
  }
  // the loop below will play the note for the duration of 1s
  for(int j = 0; j < kAudioSampleFrequency / kAudioTxBufferSize; ++j)
  {
    audio.spk.play(waveform, kAudioTxBufferSize);
  }
}
// play whole music
void playMusic(void) 
{
  for( ; step < 42; step++)
  {
    uLCD.cls();
    uLCD.printf("\n%s %2D\n",song_name,step);
    int length = noteLength[step];
    while(length--)
    {
      queue.call(playNote, song[step]);
      if(length <= 1) wait(1.0);
    }
  }
}
// backward the music
void back(void) 
{
  if (step <= 8) step = 0 ;
  else step = step - 8;
}
// forward the music
void forward(void) 
{
  if (step >= 34) step = 42 ;
  else step = step + 8;
}
// load song data into board
void loadSignal(void)
{
  green_led = 0;
  int i = 0;
  int serialCount = 0;
  audio.spk.pause();
  while(i < signalLength)
  {
    if(pc.readable())
    {
      serialInBuffer[serialCount] = pc.getc();
      serialCount++;
      if(serialCount == 3)
      {
        serialInBuffer[serialCount] = '\0';
        song[i] = (float) atof(serialInBuffer);
        serialCount = 0;
        i++;
      }
    }
  }
  i = 0;
  while(i < signalLength)
  {
    if(pc.readable())
    {
      serialInBuffer[serialCount] = pc.getc();
      serialCount++;
      if(serialCount == 1)
      {
        serialInBuffer[serialCount] = '\0';
        noteLength[i] = (float) atof(serialInBuffer);
        serialCount = 0;
        i++;
      }
    }
  }
  green_led = 1;
}
// Return the result of the last prediction
int PredictGesture(float* output) 
{
  // How many times the most recent gesture has been matched in a row
  static int continuous_count = 0;
  // The result of the last prediction
  static int last_predict = -1;

  // Find whichever output has a probability > 0.8 (they sum to 1)
  int this_predict = -1;
  for (int i = 0; i < label_num; i++) {
    if (output[i] > 0.8) this_predict = i;
  }

  // No gesture was detected above the threshold
  if (this_predict == -1) {
    continuous_count = 0;
    last_predict = label_num;
    return label_num;
  }

  if (last_predict == this_predict) {
    continuous_count += 1;
  } else {
    continuous_count = 0;
  }
  last_predict = this_predict;

  // If we haven't yet had enough consecutive matches for this gesture,
  // report a negative result
  if (continuous_count < config.consecutiveInferenceThresholds[this_predict]) {
    return label_num;
  }
  // Otherwise, we've seen a positive result, so clear all our variables
  // and report it
  continuous_count = 0;
  last_predict = -1;

  return this_predict;
}
void CheckGesture(void) 
{
  constexpr int kTensorArenaSize = 60 * 1024;
  uint8_t tensor_arena[kTensorArenaSize];
  bool should_clear_buffer = false;
  bool got_data = false;
  int gesture_index;
  static tflite::MicroErrorReporter micro_error_reporter;
  tflite::ErrorReporter* error_reporter = &micro_error_reporter;
  const tflite::Model* model = tflite::GetModel(g_magic_wand_model_data);
  if (model->version() != TFLITE_SCHEMA_VERSION) {
    error_reporter->Report(
        "Model provided is schema version %d not equal "
        "to supported version %d.",
        model->version(), TFLITE_SCHEMA_VERSION);
    return -1;
  }
  static tflite::MicroOpResolver<6> micro_op_resolver;
  micro_op_resolver.AddBuiltin(
      tflite::BuiltinOperator_DEPTHWISE_CONV_2D,
      tflite::ops::micro::Register_DEPTHWISE_CONV_2D());
  micro_op_resolver.AddBuiltin(tflite::BuiltinOperator_MAX_POOL_2D,
                               tflite::ops::micro::Register_MAX_POOL_2D());
  micro_op_resolver.AddBuiltin(tflite::BuiltinOperator_CONV_2D,
                               tflite::ops::micro::Register_CONV_2D());
  micro_op_resolver.AddBuiltin(tflite::BuiltinOperator_FULLY_CONNECTED,
                               tflite::ops::micro::Register_FULLY_CONNECTED());
  micro_op_resolver.AddBuiltin(tflite::BuiltinOperator_SOFTMAX,
                               tflite::ops::micro::Register_SOFTMAX());
  micro_op_resolver.AddBuiltin(tflite::BuiltinOperator_RESHAPE,
                               tflite::ops::micro::Register_RESHAPE(), 1);
  static tflite::MicroInterpreter static_interpreter(
      model, micro_op_resolver, tensor_arena, kTensorArenaSize, error_reporter);
  tflite::MicroInterpreter* interpreter = &static_interpreter;
  interpreter->AllocateTensors();
  TfLiteTensor* model_input = interpreter->input(0);
  if ((model_input->dims->size != 4) || (model_input->dims->data[0] != 1) ||
      (model_input->dims->data[1] != config.seq_length) ||
      (model_input->dims->data[2] != kChannelNumber) ||
      (model_input->type != kTfLiteFloat32)) {
    error_reporter->Report("Bad input tensor parameters in model");
    return -1;
  }
  int input_length = model_input->bytes / sizeof(float);
  TfLiteStatus setup_status = SetupAccelerometer(error_reporter);
  if (setup_status != kTfLiteOk) {
    error_reporter->Report("Set up failed\n");
    return -1;
  }
  error_reporter->Report("Set up successful...\n");
  while (true) {
    got_data = ReadAccelerometer(error_reporter, model_input->data.f,
                                 input_length, should_clear_buffer);
    if (!got_data) {
      should_clear_buffer = false;
      continue;
    }
    TfLiteStatus invoke_status = interpreter->Invoke();
    if (invoke_status != kTfLiteOk) {
      error_reporter->Report("Invoke failed on index: %d\n", begin_index);
      continue;
    }
    gesture_index = PredictGesture(interpreter->output(0)->data.f);
    should_clear_buffer = gesture_index < label_num;
    if (gesture_index == 1) {
      green_led = !green_led;
    }
  }
}
void playinging(void)
{
  while(1)
  {
    uLCD.cls();
    uLCD.printf("\nPlaying~~\n");
    wait(0.5);
  }
}
void mode_select(void) 
{
  //queue2.cancel(playinging_id);
  red_led=0;
  uLCD.cls();
  wait(1.5);
  uLCD.printf("\nMODE menu:\n");
  while(true)
  {
    if (BW==0) 
    {
      red_led=1;
      uLCD.cls();
      //playinging_id = queue2.call(playinging);
      return;
    }
  }
}
int main(void)
{
  // initialization
  pc.baud(9600);
  green_led = 1;
  red_led   = 1;
  uLCD.printf("\n106061118\n");
  wait(2);
  menuing.start(callback(&queue, &EventQueue::dispatch_forever));
  playing.start(callback(&queue2, &EventQueue::dispatch_forever));
  MENU.rise(queue.event(mode_select));
  playinging_id = queue2.call(playinging);

  /*
  for (int i=0;i<42;i++)
  {
    pc.printf("%d %d\r\n", i, song[i]);
    wait(0.3);
  }
    for (int i=0;i<42;i++)
  {
    pc.printf("%d %d\r\n", i, noteLength[i]);
    wait(0.3);
  }*/
  while(1)
  {
    wait(0.5);
  }
}